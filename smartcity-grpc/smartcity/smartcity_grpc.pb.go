// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: smartcity.proto

package smartcity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SmartCityService_GetTrafficStatus_FullMethodName = "/smartcity.SmartCityService/GetTrafficStatus"
	SmartCityService_StreamAirQuality_FullMethodName = "/smartcity.SmartCityService/StreamAirQuality"
	SmartCityService_SetTrafficLights_FullMethodName = "/smartcity.SmartCityService/SetTrafficLights"
	SmartCityService_EmergencyControl_FullMethodName = "/smartcity.SmartCityService/EmergencyControl"
)

// SmartCityServiceClient is the client API for SmartCityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmartCityServiceClient interface {
	GetTrafficStatus(ctx context.Context, in *TrafficRequest, opts ...grpc.CallOption) (*TrafficStatus, error)
	StreamAirQuality(ctx context.Context, in *AirQualityRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AirQualityData], error)
	SetTrafficLights(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TrafficLightCommand, CommandResponse], error)
	EmergencyControl(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EmergencyCommand, EmergencyFeedback], error)
}

type smartCityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmartCityServiceClient(cc grpc.ClientConnInterface) SmartCityServiceClient {
	return &smartCityServiceClient{cc}
}

func (c *smartCityServiceClient) GetTrafficStatus(ctx context.Context, in *TrafficRequest, opts ...grpc.CallOption) (*TrafficStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrafficStatus)
	err := c.cc.Invoke(ctx, SmartCityService_GetTrafficStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartCityServiceClient) StreamAirQuality(ctx context.Context, in *AirQualityRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AirQualityData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SmartCityService_ServiceDesc.Streams[0], SmartCityService_StreamAirQuality_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AirQualityRequest, AirQualityData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmartCityService_StreamAirQualityClient = grpc.ServerStreamingClient[AirQualityData]

func (c *smartCityServiceClient) SetTrafficLights(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TrafficLightCommand, CommandResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SmartCityService_ServiceDesc.Streams[1], SmartCityService_SetTrafficLights_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TrafficLightCommand, CommandResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmartCityService_SetTrafficLightsClient = grpc.ClientStreamingClient[TrafficLightCommand, CommandResponse]

func (c *smartCityServiceClient) EmergencyControl(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EmergencyCommand, EmergencyFeedback], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SmartCityService_ServiceDesc.Streams[2], SmartCityService_EmergencyControl_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmergencyCommand, EmergencyFeedback]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmartCityService_EmergencyControlClient = grpc.BidiStreamingClient[EmergencyCommand, EmergencyFeedback]

// SmartCityServiceServer is the server API for SmartCityService service.
// All implementations must embed UnimplementedSmartCityServiceServer
// for forward compatibility.
type SmartCityServiceServer interface {
	GetTrafficStatus(context.Context, *TrafficRequest) (*TrafficStatus, error)
	StreamAirQuality(*AirQualityRequest, grpc.ServerStreamingServer[AirQualityData]) error
	SetTrafficLights(grpc.ClientStreamingServer[TrafficLightCommand, CommandResponse]) error
	EmergencyControl(grpc.BidiStreamingServer[EmergencyCommand, EmergencyFeedback]) error
	mustEmbedUnimplementedSmartCityServiceServer()
}

// UnimplementedSmartCityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmartCityServiceServer struct{}

func (UnimplementedSmartCityServiceServer) GetTrafficStatus(context.Context, *TrafficRequest) (*TrafficStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrafficStatus not implemented")
}
func (UnimplementedSmartCityServiceServer) StreamAirQuality(*AirQualityRequest, grpc.ServerStreamingServer[AirQualityData]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAirQuality not implemented")
}
func (UnimplementedSmartCityServiceServer) SetTrafficLights(grpc.ClientStreamingServer[TrafficLightCommand, CommandResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SetTrafficLights not implemented")
}
func (UnimplementedSmartCityServiceServer) EmergencyControl(grpc.BidiStreamingServer[EmergencyCommand, EmergencyFeedback]) error {
	return status.Errorf(codes.Unimplemented, "method EmergencyControl not implemented")
}
func (UnimplementedSmartCityServiceServer) mustEmbedUnimplementedSmartCityServiceServer() {}
func (UnimplementedSmartCityServiceServer) testEmbeddedByValue()                          {}

// UnsafeSmartCityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmartCityServiceServer will
// result in compilation errors.
type UnsafeSmartCityServiceServer interface {
	mustEmbedUnimplementedSmartCityServiceServer()
}

func RegisterSmartCityServiceServer(s grpc.ServiceRegistrar, srv SmartCityServiceServer) {
	// If the following call pancis, it indicates UnimplementedSmartCityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SmartCityService_ServiceDesc, srv)
}

func _SmartCityService_GetTrafficStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartCityServiceServer).GetTrafficStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartCityService_GetTrafficStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartCityServiceServer).GetTrafficStatus(ctx, req.(*TrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartCityService_StreamAirQuality_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AirQualityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmartCityServiceServer).StreamAirQuality(m, &grpc.GenericServerStream[AirQualityRequest, AirQualityData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmartCityService_StreamAirQualityServer = grpc.ServerStreamingServer[AirQualityData]

func _SmartCityService_SetTrafficLights_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SmartCityServiceServer).SetTrafficLights(&grpc.GenericServerStream[TrafficLightCommand, CommandResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmartCityService_SetTrafficLightsServer = grpc.ClientStreamingServer[TrafficLightCommand, CommandResponse]

func _SmartCityService_EmergencyControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SmartCityServiceServer).EmergencyControl(&grpc.GenericServerStream[EmergencyCommand, EmergencyFeedback]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmartCityService_EmergencyControlServer = grpc.BidiStreamingServer[EmergencyCommand, EmergencyFeedback]

// SmartCityService_ServiceDesc is the grpc.ServiceDesc for SmartCityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmartCityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcity.SmartCityService",
	HandlerType: (*SmartCityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrafficStatus",
			Handler:    _SmartCityService_GetTrafficStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAirQuality",
			Handler:       _SmartCityService_StreamAirQuality_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetTrafficLights",
			Handler:       _SmartCityService_SetTrafficLights_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EmergencyControl",
			Handler:       _SmartCityService_EmergencyControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "smartcity.proto",
}
